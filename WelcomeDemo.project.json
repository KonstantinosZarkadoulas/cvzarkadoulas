{"layout":{"activeNavigationTab":"project","navigationPanelIsOpen":true,"referencePanelIsOpen":true,"activeSoundTicTab":"volume","tileEditor":{"tileSelectorIsOpen":true,"showGrid":false},"tilemapEditor":{"tilemapSelectorIsOpen":true,"tileSelectorIsOpen":true,"cursorX":0,"cursorY":0,"showGrid":true},"soundEditor":{"pianoOctave":4,"lastVolumeTic":-1,"lastPitchTic":-1,"lastArpTic":-1},"referenceTabTitle":"Motivation","play":{"stickConsoleToBottom":true},"referenceRoutes":{"about":{"current":["REFERENCE_ABOUT"],"cached":{"REFERENCE_ABOUT":["REFERENCE_ABOUT"]}},"project":{"current":["MOTIVATION"],"cached":{"MOTIVATION":["MOTIVATION"]}},"play":{"current":["CONSOLE"],"cached":{"CONSOLE":["CONSOLE"]}},"code":{"current":["API"],"cached":{"API":["API"]}},"tile":{"current":["ARTICLES"],"cached":{"ARTICLES":["ARTICLES"]}},"tilemap":{"current":["ARTICLES"],"cached":{"ARTICLES":["ARTICLES"]}},"sound":{"current":["HOTKEYS"],"cached":{"HOTKEYS":["HOTKEYS"]}},"publish":{"current":["MOTIVATION"],"cached":{"MOTIVATION":["MOTIVATION"]}},"instructions":{"current":["MOTIVATION"],"cached":{"MOTIVATION":["MOTIVATION"]}}},"colorPickerIsOpen":false,"activePage":"EDITOR_PAGE","modalCount":false,"showCircleTileFlags":false},"sound":{"sounds":[{"volumeTics":[9,9,0,7,7,7,6,6,0,11,11,11,4,4,3,7,7,0,0,5,4,4,4,4,4,0,2,3,3,4,0,0],"pitchTics":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"arpTics":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2],"pitchScale":100,"wave":3,"useVolumeLoop":true,"volumeLoopStart":0,"volumeLoopEnd":27,"usePitchLoop":false,"pitchLoopStart":0,"pitchLoopEnd":31,"useArpLoop":true,"arpLoopStart":0,"arpLoopEnd":31,"name":"Walking sound","releaseLength":1,"releaseMode":"linear","needToAddToAudioEngine":false},{"volumeTics":[11,15,9,4,3,5,15,11,11,6,2,0,0,10,15,11,10,7,3,0,1,15,4,4,1,1,4,15,4,4,4,5],"pitchTics":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"arpTics":[0,0,0,0,1,1,1,1,3,3,3,3,5,5,5,5,7,7,7,7,9,9,9,9,11,11,11,11,8,8,8,8],"pitchScale":100,"wave":2,"useVolumeLoop":false,"volumeLoopStart":0,"volumeLoopEnd":31,"usePitchLoop":false,"pitchLoopStart":0,"pitchLoopEnd":31,"useArpLoop":false,"arpLoopStart":0,"arpLoopEnd":31,"name":"Dangerous mushroom sound","releaseLength":10,"releaseMode":"linear","needToAddToAudioEngine":false},{"volumeTics":[9,8,8,10,14,14,9,2,0,7,8,11,15,3,3,3,2,2,8,2,2,3,9,3,3,4,6,1,1,11,15,2],"pitchTics":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"arpTics":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"pitchScale":100,"wave":0,"useVolumeLoop":false,"volumeLoopStart":0,"volumeLoopEnd":31,"usePitchLoop":false,"pitchLoopStart":0,"pitchLoopEnd":31,"useArpLoop":false,"arpLoopStart":0,"arpLoopEnd":31,"name":"Safe mushroom sound","releaseLength":1,"releaseMode":"linear","needToAddToAudioEngine":false}],"activeSound":0,"audioEvents":[],"piano":{"speed":0,"volume":0.75}},"palette":{"colors":["000000","0b0711","eaf2de","766e76","561f6e","7d4f31","e98c49","fbc0a0","f681b2","d83232","e3e962","65cf57","2ba957","187575","1e2cB0","2379e5","95cae5","888888","888888"],"selectedIndex":1,"altIndex":0},"pixelTools":{"selectedTool":"PENCIL_TOOL","selectedTileTool":"TILE_DRAW_TOOL","pixelToolSettings":{"pencilSize":1,"eraserSize":1,"lineSize":1}},"tileset":{"tilesets":[{"name":"untitled","width":8,"height":8,"selectedTile":0,"selectionWidth":1,"selectionHeight":1,"mapSelectedTile":0,"mapSelectionWidth":1,"mapSelectionHeight":1,"activeLayer":0,"layers":[{"isVisible":true,"data":"CwGgDCoIwjHSA7OStbPmgHFlBmNOEAmATn0JQQ1RiJJFIggCZaU3ojO0IHy+lVqlLd2wrh3EgeAVhRkZCxkom8loJlIBsIpbpptdBcjyPFlpy+vMxQJtLqwDHaZJtcxkNGLq8h5cl83C0wg5T8kPX9nFF1yF2RyeQhFNlSVInjGZhBsqFzslLQrDPCIbK0IZGzqvJU6p1xhAyjDeu8olraQLB96tmQ6CyHKTozdQcoCUeHx1ynhmcoY3QzhyailrbH69YWo3DtlDaVZkZXDtbRJY4zoDOLjqGGsUEFQI4CFY+KCT+w13IoBowK6Kk+zSiHjqMOhsCwuSgfjYL3SsBRsCg6ORsFR2LiePqumg+PRRzY5kxaJQFP09QJNIgdKpRKZDLY8hgXLJKB5O1JWPRgoYJEEMBIvIg-NRFgKSmeUtobC+gvZmNGkqFhMZaFRsuGusV2tS1IJpqJLHZwDpiKottyNqJduZRMkgvdbqxytoxs9BJdcs53tA8k9YZD33DvosXNg-2duS1dH88gIk2ShATAaTbO9yDT9XkccmBDjUGzKtzRtTFj83LrKkLxm+dErvUdeZeMmljcz6dQ5YIWsDau9DdsBcb8vk5lDWaDHaoXeGs-qeF0Q8Xo5XsGL9JYwbb2+rBrom-pFdbHWvV8FgeT3ovwTwveCDeP99PhAlmc-iYoGtiD-eMfTwdFZH1H9gNvYciXA74hiPAgWEFLkSDoM8ojXC8cKLTxn1A5NM1sBtMVRBNZnbdDFxomVQJBBd5SAqc5yjBky0bQiry1ecBwJPDu33AkKJCUBZSoxd-2QR873hETQP8cSQmPIIsKvCM-E48wp2PXjvgHFh935Y9-E2JSvR4AllLHK8zIVQ5d2DUjvnMQ9YJ9PiBmMrsGE6KyzE8jRfJCZAVScgz13nf8CQQ4SDT8qIAtQZKbJC-wwt6CLBJIhkPwGDzBVQ1ziW+akelS4LrKUEyKqyoCWG0hle34wrLXnVl5HK-yQkpNAEwkpRZQGkIUP60KlDU6C8H3NyPOTXs3N7bq9VQTLBr6iUUt6hyRv8Matv8GAeHWzIsLwECeLZRaBmWy14UG46gsqo8+vcBzRjYKaUz3SLJnyq7YuDFbzPkwKPRqvMag+s7oIvHS-pkAG4KBsqoYKizqpe1tBtB5A6R+1j6lwEt8PMWbSq3IrryKLYGG7EnXE4pCCvIy8+sWObvu9Yq8MI3RuPbASF3K7thbpZSjMs2BUnU6KBnluTGSPUDRcw74CYsZYpd1OChll6bLqFlWrzVokuvuuyLE2pKtVErabaGdWfou+a2RN-j1OBy3RSG3q7cU62YbF9SQK0kqSTd5WPLN4WWdMqIxuKo1EoO52eZp37m3N+lFZRqCt1j4NNZkobatL-FdygXK-EZvT3Y1p9M-3Eug51waDoNn7Gbco2wOL9Gk-LoPmKwnuBhVgW2uq7OpfkTWk962rF6OrvvVdqmvVn-c2atvWZADveLlH6bEZnA9kZ9CnJh3n3xsdg+74d4P0+7YN+JuzFSY69co8pT+ZaIXSm3XqtlfYPxDqfUm1dM7n3MJxeu0dSZEz8L2VuQ9B4Klfr+P+OdbCM3QWXTBlcgKcWgAmCMclKEUNoDQ8hPoWAXgHJxQhlJh5p13CQds9CIZKystw0CdJ+Y9gjrGeqHciG6grgEfkcVxH3xhu3BRg1ZCyIHrrC4SitrLFUfBdRw0-b+C0SAjKAE6gp2UUvPMK8eg5h1JtVOkNhaA2QjjBUjjOZLjfA4s4I8wYLkYrJSiDDQJTAOlETEgZapW0+mJGGY5pEJKDmAlS8SYb8iicA2JW01xJLGnkqqCVUkGLXBkwo6MnrPw2oU0aNT9pOMertQxSUGleI5DtN6yTiE+nqa9DpvixplPsRNapBjen9MOonGG4TEqZSGRUCpwVTpGKaeMlZYypkSI2bExifV5ntKmMpI6dTNk9NOfRd6jS+mBhBmkqRXT7mDPRnjNxNznl3K2Wc6Rw8Xn7JZpsNmtgOZbDmpE3IEtJGBRZqOB09o2TXH+URN0UInSMgRSFUA5kDqcBRa-T2GJaTAM2KMSIV4oJOlYGvN+VL8W4ggNzFspdrK4vggxeFhLdSMs8iiqCok1TXH0ggLl-IKXEHjopLu1woLHA8FCtxoq8DirspKqQsUVCtSsNFHFHAlXvn4YAtFqq2AOExZNYKvEoQzSfs7KV91NjkAHB4Y45KeUhRMrahSLYrAXnCAgZlVBeVssNcIT13pwj+vgOS0J7LxTmDBJEKwEbYDczfoffOBLMDC3jSUBU2r4AE2uJiBwjrkVwuDQSiNQA","format":"rc"}],"flags":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}],"activeIndex":0,"editorSelection":{"width":0,"height":0,"offsetX":0,"offsetY":0,"data":[],"isActive":false}},"tilemap":{"activeIndex":0,"tilemaps":[{"name":"untitled","width":12,"height":8,"activeLayer":0,"layers":[{"isVisible":true,"data":"IwGgzGLADOAsVwFZF1AJhEg7CTSAOcLXUJATjxNUlDRADZqyjIcbVQzStKn2MRUGFh1aIepjAIMlYaPiIwKfDzgyJTMZyVbwPMHM2IBE8acImjpuOPp0NcFHT2XuHBDbtzYSBUmAgA","format":"rc"}]}]},"project":{"tileSize":16,"name":"WelcomeDemo","screen":{"width":192,"height":128,"scaleMode":1,"scale":3,"minScale":1,"maxScale":4,"horizontalScaleCushion":10,"verticalScaleCushion":10,"rescaleOnWindowResize":true},"misc":{"hideCursor":false,"clickToBegin":true,"startTransitionFrames":60,"useNegativeMotivation":false},"editorVersion":"2.5.0","instructions":{"gameDescription":"","action1":"","action2":"","action3":"","action4":"","leftTrigger":"","rightTrigger":"","left":"","right":"","up":"","down":"","pause":""},"tileFlagsAreLocked":false},"code":{"scripts":[{"text":"// Globals\r\nlet inp = null; // input\r\nlet scr = null; // screen\r\nlet aud = null; // audio\r\n\r\nlet playerLives = 3; // Player lives\r\nlet score = 0; // Player score\r\n\r\nconst player = {\r\n    x: 90,\r\n    y: 30,\r\n    speed: 0.5,\r\n    isWalking: false,\r\n    flip: 0,\r\n    framesSinceWalkStart: 0\r\n};\r\n\r\n// Mushrooms safe, dangerous\r\nconst mushrooms = [\r\n    { x: 36, y: 30, wasGrabbed: false, type: 'safe' },\r\n    { x: 130, y: 70, wasGrabbed: false, type: 'safe' },\r\n    { x: 80, y: 96, wasGrabbed: false, type: 'dangerous' },\r\n    { x: 160, y: 96, wasGrabbed: false, type: 'dangerous' },\r\n    { x: 64, y: 32, wasGrabbed: false, type: 'dangerous' }\r\n];\r\n\r\n// Obstacles on the map\r\nconst obstacles = [\r\n    { x: 16, y: 64, gid: 34 },\r\n    { x: 32, y: 64, gid: 34 },\r\n    { x: 80, y: 64, gid: 34 },\r\n    { x: 96, y: 64, gid: 35 },\r\n    { x: 96, y: 96, gid: 43 },\r\n    { x: 96, y: 80, gid: 43 }\r\n];\r\n\r\nlet randomColor = 1;\r\n\r\n// initialization\r\nengine.onInit = () => {\r\n    inp = engine.input;\r\n    scr = engine.screen;\r\n    aud = engine.audio;\r\n\r\n    updateColors();\r\n};\r\n\r\n// update loop\r\nengine.onUpdate = () => {\r\n    scr.clear(1);\r\n\r\n    scr.drawMap(\r\n        0,      // originX on map\r\n        0,      // originY on map\r\n        -1,     // width\r\n        -1,     // height\r\n        0,      // screenX\r\n        0,      // screenY\r\n        0       // tilemap index\r\n    );\r\n\r\n    drawObstacles();\r\n    drawMushrooms();\r\n    updatePlayer();\r\n    checkMushroomCollision();\r\n    displayStatus();\r\n\r\n    let textMainColor = 2;\r\n    if (score > 0) {\r\n        textMainColor = randomColor;\r\n    }\r\n\r\n    let textPositionOffset = 0;\r\n    if (score > 1) {\r\n        textPositionOffset = Math.sin(engine.realTimeSinceGameStart * 10) * 8;\r\n    }\r\n\r\n    scr.drawText(\r\n        'Welcome to Bitmelo!',\r\n        50,\r\n        90 + Math.floor(textPositionOffset),\r\n        textMainColor,\r\n        1,\r\n        0\r\n    );\r\n};\r\n\r\n// Show lives and score\r\nfunction displayStatus() {\r\n    scr.drawText(`Lives: ${playerLives}`, 10, 10, 2, 1, 0);\r\n    scr.drawText(`Score: ${score}`, 10, 20, 2, 1, 0);\r\n}\r\n\r\n// Draw obstacles\r\nfunction drawObstacles() {\r\n    obstacles.forEach(obstacle => {\r\n        scr.drawTile(obstacle.gid, obstacle.x, obstacle.y, 0);\r\n    });\r\n}\r\n\r\n// Draw mushrooms\r\nfunction drawMushrooms() {\r\n    mushrooms.forEach(mushroom => {\r\n        if (!mushroom.wasGrabbed) {\r\n            let tileID = mushroom.type === 'dangerous' ? 15 : 61;\r\n            scr.drawTile(tileID, mushroom.x - 8, mushroom.y - 8, 0);\r\n        }\r\n    });\r\n}\r\n\r\n// Check for mushroom collision\r\nfunction checkMushroomCollision() {\r\n    mushrooms.forEach(mushroom => {\r\n        if (!mushroom.wasGrabbed) {\r\n            const deltaX = Math.abs(player.x - mushroom.x);\r\n            const deltaY = Math.abs(player.y - mushroom.y);\r\n            const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\r\n\r\n            if (distance <= 12) { // Collect mushroom\r\n                mushroom.wasGrabbed = true;\r\n\r\n                if (mushroom.type === 'dangerous') {\r\n                    playerLives -= 1;\r\n                    aud.playSound(1, bitmelo.Notes.G3, 48, 0.25, 1);\r\n                    if (playerLives <= 0) {\r\n                        scr.drawText(\"Game Over\", scr.width / 2 - 30, scr.height / 2, 3, 1, 0);\r\n                    }\r\n                } else {\r\n                    score += 1;\r\n                    aud.playSound(2, bitmelo.Notes.C5, 48, 0.25, 1);\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n// Check if player collides with obstacles\r\nfunction isCollidingWithObstacle(x, y) {\r\n    return obstacles.some(obstacle => {\r\n        return Math.abs(obstacle.x - x) < 16 && Math.abs(obstacle.y - y) < 16;\r\n    });\r\n}\r\n\r\n// Update player position\r\nfunction updatePlayer() {\r\n    let newX = player.x;\r\n    let newY = player.y;\r\n\r\n    let isWalking = false;\r\n    if (inp.left.pressed) {\r\n        newX -= player.speed;\r\n        isWalking = true;\r\n        player.flip = 1;\r\n    } else if (inp.right.pressed) {\r\n        newX += player.speed;\r\n        isWalking = true;\r\n        player.flip = 0;\r\n    }\r\n\r\n    if (inp.down.pressed) {\r\n        newY -= player.speed;\r\n        isWalking = true;\r\n    } else if (inp.up.pressed) {\r\n        newY += player.speed;\r\n        isWalking = true;\r\n    }\r\n\r\n    if (isWalking) {\r\n        player.framesSinceWalkStart += 1;\r\n    }\r\n\r\n    // play or stop audio\r\n    if (isWalking && !player.isWalking) {\r\n        player.framesSinceWalkStart = 0;\r\n\r\n        let note = bitmelo.Notes.C4;\r\n        if (score > 1) {\r\n            note = bitmelo.Notes.C2;\r\n        } else if (score > 0) {\r\n            note = bitmelo.Notes.C3;\r\n        }\r\n\r\n        aud.playInfiniteSound(\r\n            0,\r\n            note,\r\n            0.5,\r\n            2\r\n        );\r\n    } else if (!isWalking && player.isWalking) {\r\n        aud.stopInfiniteSound(0);\r\n    }\r\n\r\n    player.isWalking = isWalking;\r\n\r\n    // not colliding with fence or obstacles\r\n    if (\r\n        newX >= 16\r\n        && newX < scr.width - 16\r\n        && newY >= 24\r\n        && newY < scr.height - 16\r\n        && !isCollidingWithObstacle(newX, newY)\r\n    ) {\r\n        player.x = newX;\r\n        player.y = newY;\r\n    }\r\n\r\n    // draw the player\r\n    let frameGID = 1;\r\n    if (player.isWalking) {\r\n        if (player.framesSinceWalkStart % 16 < 8) {\r\n            frameGID = 2;\r\n        } else {\r\n            frameGID = 3;\r\n        }\r\n    }\r\n\r\n    scr.drawTile(\r\n        frameGID,\r\n        Math.floor(player.x) - 8,\r\n        Math.floor(player.y) - 8,\r\n        player.flip\r\n    );\r\n}\r\n\r\n// color randomizer\r\nfunction updateColors() {\r\n    randomColor = Math.floor(Math.random() * 16) + 1;\r\n    setTimeout(updateColors, 100);\r\n}\r\n","cursorRow":194,"cursorColumn":25,"scrollTop":0,"name":"Script0"}],"activeIndex":0,"playLogs":[{"type":"error","text":"\"Uncaught SyntaxError: missing ) after argument list\" on line 27"}]},"clipboard":{"pixels":{"width":0,"height":0,"offsetX":0,"offsetY":0,"data":[],"isActive":false}}}